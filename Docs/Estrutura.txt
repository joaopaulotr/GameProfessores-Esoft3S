===============================
Projeto: Syntax Fight: Batalha no DOM
Descrição: Um jogo desenvolvido com HTML, CSS, JavaScript e Vue.js, onde o jogador enfrenta professores em batalhas, com referências ao mundo da programação. O objetivo é sobreviver às fases e derrotar os "chefes".
Linguagem: JavaScript (Vue.js)
Execução: O projeto Vue.js pode ser executado com `npm install` e `npm run dev` no diretório `vue/`.
===============================

## Estrutura de Pastas e Arquivos:

- `Docs/`: Contém documentação adicional do projeto.
- `LICENSE`: Arquivo de licença do projeto.
- `README.md`: Descrição geral do projeto, tecnologias utilizadas e participantes.
- `node_modules/`: Dependências do Node.js.
- `package-lock.json`: Registro das dependências do Node.js.
- `package.json`: Metadados do projeto e scripts de execução.
- `vue/`: Diretório principal da aplicação Vue.js.
  - `dist/`: Diretório de build da aplicação Vue.js.
  - `index.html`: Arquivo HTML principal da aplicação.
  - `jsconfig.json`: Configurações JavaScript para o projeto.
  - `node_modules/`: Dependências do Node.js específicas do projeto Vue.
  - `package-lock.json`: Registro das dependências do Vue.
  - `package.json`: Metadados do projeto Vue e scripts de execução.
  - `public/`: Ativos estáticos da aplicação Vue.
  - `src/`: Código fonte da aplicação Vue.
    - `App.vue`: Componente raiz da aplicação, gerencia a música de fundo e as transições de rota.
    - `assets/`: Contém recursos como imagens, músicas e fontes.
      - `css/fonts.css`: Definições de fontes.
      - `images/`: Sprites de personagens, tiles e outros elementos visuais.
      - `music/`: Arquivos de música de fundo.
    - `components/`: Componentes reutilizáveis da interface do usuário e elementos do jogo.
      - `DialogBox.vue`: Componente para caixas de diálogo.
      - `HealthBar.vue`: Componente para exibir barras de vida.
      - `MiniMap.vue`: Componente para o mini-mapa.
      - `PlayerSprite.vue`: Componente que representa o jogador, sua movimentação e animações.
      - `ProfessorBoss.vue`: Componente que representa os professores (chefes) no mapa.
      - `ProximityIndicator.vue`: Indicador visual de proximidade com os chefes.
      - `Tile.vue`: Componente para renderizar os tiles do mapa.
    - `router/`: Configuração das rotas da aplicação.
      - `index.js`: Define as rotas e gerencia a reprodução de música com base na rota.
    - `utils/`: Funções utilitárias e dados do jogo.
      - `audioManager.js`: Gerenciador centralizado para reprodução de áudio.
      - `audioUtils.js`: Funções auxiliares para tocar efeitos sonoros.
      - `dadosBatalha.js`: Dados dos chefes, ataques e estado do jogador (vida, chefes derrotados).
    - `views/`: Componentes de tela/página da aplicação.
      - `BattleScreen.vue`: Tela de batalha entre o jogador e um professor.
      - `Commands.vue`: Tela de comandos/controles do jogo.
      - `Credits.vue`: Tela de créditos.
      - `Defeat.vue`: Tela de derrota.
      - `GameMapWithZoom.vue`: Tela principal do mapa do jogo, com controle de câmera e interação com chefes.
      - `Instructions.vue`: Tela de instruções do jogo.
      - `MainMenu.vue`: Tela do menu principal.
      - `OptionsView.vue`: Tela de opções.
      - `Victory.vue`: Tela de vitória.
      - `intro.vue`: Tela de introdução.
  - `vite.config.js`: Configuração do Vite para o projeto Vue.

## Variáveis e Componentes Principais (por arquivo):

### [1] Arquivo: `App.vue`
  - **Propósito:** Componente raiz que configura a estrutura básica da aplicação, incluindo a reprodução de música de fundo e transições de rota.
  - **Variáveis/Constantes:**
    - `audioElement`: Referência ao elemento de áudio HTML para a música de fundo. Usado para controlar a reprodução (play, pause, volume).
  - **Funções/Métodos:**
    - `onMounted()`: Hook do ciclo de vida do Vue que é chamado quando o componente é montado. Inicializa o `audioElement` e adiciona listeners de evento (`click`, `keydown`) para iniciar a música.
    - `startMusic()`: Função que tenta iniciar a reprodução da música de fundo. É chamada por eventos de interação do usuário para contornar restrições de autoplay do navegador.
    - `cleanup()`: Remove os event listeners para evitar vazamentos de memória.
    - `onUnmounted()`: Hook do ciclo de vida do Vue que é chamado quando o componente é desmontado. Pausa e limpa o `audioElement` e remove os listeners.

### [2] Arquivo: `GameMapWithZoom.vue`
  - **Propósito:** Gerencia a exibição do mapa do jogo, a movimentação do jogador, o controle da câmera, a interação com os chefes e o mini-mapa.
  - **Variáveis/Constantes:**
    - `playerPosition` (ref): Objeto reativo `{ x, y }` que armazena as coordenadas atuais do jogador no mapa. Usado para posicionar o `PlayerSprite` e para o cálculo da câmera.
    - `bossInteractionActive` (ref): Booleano que indica se o jogador está próximo de um chefe disponível para batalha. Controla a exibição do prompt de interação.
    - `currentBoss` (ref): Objeto do chefe (`chefesBatalha`) com o qual o jogador está interagindo no momento.
    - `bossNearButUnavailable` (ref): Booleano que indica se o jogador está próximo de um chefe, mas ele está bloqueado (requer mais chefes derrotados).
    - `nearbyUnavailableBoss` (ref): Objeto do chefe bloqueado próximo ao jogador.
    - `camera` (ref): Objeto reativo `{ x, y, zoom }` que controla a posição e o nível de zoom da câmera no mapa. `zoom` amplia a visualização do jogo.
    - `mapWidth`, `mapHeight`, `tileSize`: Constantes que definem as dimensões do mapa em tiles e o tamanho de cada tile em pixels.
    - `bossesPositions`: Array de objetos `{ bossId, x, y }` que define as posições fixas dos chefes no mapa em coordenadas de pixel.
    - `gameMap` (ref): Array bidimensional que representa a estrutura do mapa, onde `1` pode indicar uma área de colisão e `0` uma área livre.
    - `showProximityIndicator` (ref): Booleano que controla a visibilidade do indicador de proximidade do chefe.
    - `proximityIndicatorPosition` (ref): Posição do indicador de proximidade.
    - `unavailableMessageVisible` (ref): Booleano que controla a visibilidade da mensagem de chefe indisponível.
    - `miniMapVisible` (ref): Booleano que controla a visibilidade do mini-mapa.
  - **Funções/Métodos:**
    - `updateCamera(playerX, playerY)`: Centraliza a câmera na posição do jogador, aplicando zoom e limitando a visualização aos limites do mapa. É crucial para a experiência de exploração do mapa.
    - `startBattle()`: Inicia a batalha se o jogador estiver próximo de um chefe disponível, redirecionando para a tela de batalha. Caso contrário, exibe uma mensagem de chefe bloqueado.
    - `showUnavailableMessage()`: Exibe temporariamente uma mensagem informando que o chefe está bloqueado.
    - `updatePlayerPosition(e)`: Listener para o evento `playerMoved` (disparado por `PlayerSprite.vue`). Atualiza a posição do jogador e da câmera, e verifica a proximidade com os chefes.
    - `openMiniMap()`, `closeMiniMap()`, `toggleMiniMap()`: Funções para controlar a visibilidade do mini-mapa.
    - `handleKeyDown(e)`: Listener para eventos de teclado. Ativa a batalha com a tecla 'E' e o mini-mapa com a tecla 'M'.
  - **Eventos:**
    - Escuta o evento `playerMoved` (disparado por `PlayerSprite.vue`) para atualizar a câmera e verificar a proximidade com os chefes.
    - Dispara o evento `professorProximity` para `ProfessorBoss.vue` para indicar a proximidade do jogador.
    - Escuta eventos de teclado (`keydown`) para interação (batalha, mini-mapa).

### [3] Arquivo: `PlayerSprite.vue`
  - **Propósito:** Controla a renderização, movimentação e animação do sprite do jogador, além de gerenciar a detecção de colisão.
  - **Variáveis/Constantes:**
    - `position` (ref): Objeto reativo `{ x, y }` que armazena as coordenadas atuais do sprite do jogador. É a posição visual do jogador no mapa.
    - `direction` (ref): String que indica a direção atual do jogador (



down
', 'up', 'left', 'right'). Usado para selecionar o conjunto correto de sprites de animação.
    - `frameIndex` (ref): Número inteiro que indica o frame atual da animação do jogador. Usado para iterar sobre os sprites de animação.
    - `keysPressed` (ref): Objeto que rastreia quais teclas estão sendo pressionadas no momento. Usado para movimentação contínua.
    - `animationSpeed`: Velocidade da animação em milissegundos.
    - `step`: Quantidade de pixels que o jogador se move por "passo".
    - `charW`, `charH`: Largura e altura do sprite do personagem.
    - `walkFrames`, `frames`: Objetos que contêm os caminhos para os sprites de animação do jogador para cada direção.
  - **Funções/Métodos:**
    - `handleKeyPress(event)`: (Obsoleto, substituído por `handleKeyDown`/`handleKeyUp` e `gameLoop`) Função que lidava com a movimentação do jogador e a animação baseada em eventos de `keydown` individuais.
    - `gameLoop(timestamp)`: Função principal do loop do jogo que atualiza a posição do jogador com base nas teclas pressionadas e avança o frame da animação. Dispara o evento `playerMoved`.
    - `handleKeyDown(e)`: Registra as teclas que estão sendo pressionadas.
    - `handleKeyUp(e)`: Desregistra as teclas que foram soltas.
    - `isColliding(newX, newY)`: Verifica se a nova posição do jogador (`newX`, `newY`) resultaria em uma colisão com um tile de colisão no mapa. Considera uma tolerância para evitar travamentos.
  - **Eventos:**
    - Dispara o evento `playerMoved` (CustomEvent) com as coordenadas `x` e `y` do jogador, que é escutado por `GameMapWithZoom.vue` para atualizar a câmera e a lógica de proximidade com os chefes.
    - Escuta eventos de teclado (`keydown`, `keyup`) para controlar a movimentação do jogador.

### [4] Arquivo: `ProfessorBoss.vue`
  - **Propósito:** Componente que renderiza um sprite de professor (chefe) no mapa e exibe informações sobre ele, incluindo um indicador de proximidade e estado de bloqueio.
  - **Variáveis/Constantes:**
    - `props`: Recebe `boss` (objeto com dados do chefe), `x`, `y` (coordenadas de posicionamento) e `bloqueado` (booleano para indicar se o chefe está inacessível).
    - `isPlayerNearby` (ref): Booleano reativo que indica se o jogador está próximo do chefe. Usado para ativar animações e estilos visuais específicos.
  - **Funções/Métodos:**
    - `handlePlayerProximity(e)`: Listener para o evento `professorProximity`. Atualiza `isPlayerNearby` com base na proximidade do jogador com este chefe específico.
  - **Eventos:**
    - Escuta o evento `professorProximity` (CustomEvent) disparado por `GameMapWithZoom.vue` para reagir à proximidade do jogador.

### [5] Arquivo: `router/index.js`
  - **Propósito:** Define as rotas da aplicação Vue.js e gerencia a reprodução de música de fundo com base na rota atual.
  - **Variáveis/Constantes:**
    - `routes`: Array de objetos que define cada rota, seu caminho (`path`), componente associado (`component`) e metadados (`meta`) como o nome da trilha sonora.
    - `router`: Instância do Vue Router.
  - **Funções/Métodos:**
    - `beforeEach(to, from)`: Hook de navegação global que é executado antes de cada transição de rota. Ele verifica se a rota de destino (`to`) possui uma trilha sonora definida em seus metadados (`to.meta.soundtrack`). Se sim, ele usa o `audioManager` para tocar a trilha sonora correspondente; caso contrário, ele para todas as músicas.

### [6] Arquivo: `utils/dadosBatalha.js`
  - **Propósito:** Armazena os dados estáticos dos chefes do jogo, seus ataques e gerencia o estado persistente do jogador (vida, chefes derrotados) usando `useStorage` do `@vueuse/core`.
  - **Variáveis/Constantes:**
    - `chefesBatalha`: Array de objetos, onde cada objeto representa um chefe com propriedades como `id`, `nome`, `vida`, `sprite`, `estilo`, `chefesNecessarios` (número de chefes que precisam ser derrotados antes que este chefe seja acessível) e `ataques` (array de ataques com `nome`, `dano` e `sprite` de animação).
    - `useDadosJogador()`: Composable que retorna um objeto reativo com os dados do jogador, persistidos via `useStorage`:
      - `vida` (ref): Vida atual do jogador.
      - `ataques` (ref): Ataques disponíveis para o jogador.
      - `vitorias` (ref): Número de vitórias do jogador.
      - `derrotas` (ref): Número de derrotas do jogador.
      - `chefesDerrotados` (ref): Número de chefes que o jogador já derrotou. Usado para desbloquear novos chefes.
      - `vidaMaxima` (ref): Vida máxima do jogador.

### [7] Arquivo: `utils/audioManager.js`
  - **Propósito:** Gerenciador centralizado para reprodução de áudio no jogo, utilizando a biblioteca Howler.js. Permite tocar e parar trilhas sonoras com transições suaves.
  - **Variáveis/Constantes:**
    - `tracks`: Objeto que mapeia nomes de trilhas sonoras (ex: 'menu', 'map', 'battle') para seus respectivos caminhos de arquivo de áudio.
    - `howlNodes`: Objeto que armazena instâncias de `Howl` para cada trilha sonora, permitindo controle individual.
    - `currentTrackName` (ref): Nome da trilha sonora atualmente em reprodução.
    - `globalVolume` (ref): Volume global do áudio do jogo.
  - **Funções/Métodos:**
    - `playTrack(trackName)`: Inicia a reprodução de uma trilha sonora específica. Se uma trilha sonora diferente estiver tocando, ela é suavemente desvanecida antes de iniciar a nova. Gerencia o loop e o volume.
    - `stopAll()`: Para todas as trilhas sonoras em reprodução com um desvanecimento suave.
    - `setGlobalVolume(volume)`: Define o volume global do áudio do jogo.

### [8] Arquivo: `utils/audioUtils.js`
  - **Propósito:** Funções utilitárias para tocar efeitos sonoros pontuais no jogo, com uma funcionalidade de debounce para evitar múltiplas reproduções rápidas do mesmo som.
  - **Variáveis/Constantes:**
    - `sounds`: Objeto que mapeia nomes de sons para seus caminhos de arquivo.
    - `soundDebounce`: Objeto para controlar o debounce de sons, evitando que sejam tocados repetidamente em um curto período.
  - **Funções/Métodos:**
    - `playSound(soundName)`: Toca um efeito sonoro específico. Define o volume e lida com erros de reprodução.
    - `playSoundWithDebounce(soundName, timeout)`: Toca um efeito sonoro, mas apenas se um determinado tempo (`timeout`) tiver passado desde a última vez que o mesmo som foi tocado. Útil para sons de interação que podem ser disparados rapidamente.

### [9] Arquivo: `views/BattleScreen.vue`
  - **Propósito:** Componente da tela de batalha, onde o jogador enfrenta um professor. Gerencia a lógica da batalha, exibição de barras de vida, animações de ataque e transições de tela (vitória/derrota).
  - **Variáveis/Constantes:**
    - `playerStats` (ref): Objeto reativo com as estatísticas do jogador para a batalha atual (`name`, `health`, `maxHealth`).
    - `bossStats` (ref): Objeto reativo com as estatísticas do chefe para a batalha atual (`health`, `maxHealth`).
    - `chefeBatalhaId` (computed): ID do chefe a ser enfrentado, obtido da rota.
    - `chefeBatalha` (ref): Objeto completo do chefe, encontrado em `dadosBatalha.js`.
    - `textoFala` (ref): Texto exibido na caixa de diálogo da batalha, informando sobre os ataques e eventos.
    - `bossAttackSprites`, `bossAttackName`, `bossAttackFrame`: Variáveis para controlar a animação de ataque do chefe.
    - `playerIdleSprite`, `currentPlayerAttackSprites`, `playerAttackFrame`, `isPlayerAttacking`: Variáveis para controlar a animação de ataque do jogador.
    - `playerHits`, `bossHits`: Contadores de golpes para cada um, usados para mudar a cor da barra de vida.
  - **Funções/Métodos:**
    - `onMounted()`: Hook do ciclo de vida. Inicializa a música de batalha, restaura a vida do jogador para o máximo e configura os dados do chefe.
    - `onUnmounted()`: Hook do ciclo de vida. Retorna a música para a trilha sonora do mapa.
    - `animarAtaquePlayer(sprites)`: Gerencia a animação de ataque do jogador, iterando sobre os sprites fornecidos.
    - `realizarAtaque(ataque)`: Lógica principal do ataque do jogador. Calcula o dano (ou cura), atualiza a vida do chefe/jogador, exibe mensagens e, se necessário, inicia o contra-ataque do chefe ou redireciona para a tela de vitória/derrota.
    - `getHitColor(hits)`: Função computada que retorna uma cor baseada no número de golpes, usada para as barras de vida.
    - `gridAreaByIndex(idx)`: Função auxiliar para posicionar os botões de ataque na grade.

## Controles de Câmera:

Os controles de câmera são implementados principalmente no arquivo `GameMapWithZoom.vue`.

- **Arquivo:** `GameMapWithZoom.vue`
- **Variáveis que ajustam a posição/zoom da câmera:**
  - `camera` (ref): Objeto `{ x, y, zoom }`.
    - `camera.x`, `camera.y`: Coordenadas em pixels que definem o canto superior esquerdo da área visível do mapa. São ajustadas para centralizar o jogador.
    - `camera.zoom`: Fator de zoom aplicado ao mapa. Um valor de `2.0` (como definido no código) significa que o mapa é ampliado em 2 vezes.
- **Eventos do usuário que disparam ações:**
  - A movimentação do jogador, que é controlada por eventos de teclado (`keydown`, `keyup`) em `PlayerSprite.vue`, dispara um evento personalizado `playerMoved`.
  - `GameMapWithZoom.vue` escuta o evento `playerMoved` através da função `updatePlayerPosition(e)`.
- **Como o personagem permanece centralizado:**
  - A função `updateCamera(playerX, playerY)` em `GameMapWithZoom.vue` é responsável por centralizar a câmera no jogador.
  - Ela calcula a posição `x` e `y` da câmera subtraindo metade da largura/altura da viewport (dividida pelo zoom) da posição do jogador. Isso efetivamente coloca o jogador no centro da tela.
  - Limites são aplicados (`Math.max`, `Math.min`) para garantir que a câmera não se mova para fora das bordas do mapa, mantendo o mapa sempre preenchendo a tela.

## Fluxo de Execução:

O projeto Syntax Fight, sendo uma aplicação Vue.js, segue um fluxo de execução típico de SPAs (Single Page Applications):

1.  **Carregamento do `index.html`:** O navegador carrega o arquivo `public/index.html`. Este é o ponto de entrada principal da aplicação. Ele contém um `<div id="app"></div>` onde a aplicação Vue será montada.

2.  **Inicialização do Vue (`main.js`):**
    - O arquivo `src/main.js` é o ponto de entrada JavaScript da aplicação.
    - Ele importa `createApp` do Vue, o componente raiz `App.vue`, o roteador (`./router`), e o Pinia (gerenciador de estado).
    - `createApp(App)` cria a instância da aplicação Vue.
    - `app.use(router)`: O Vue Router é instalado, permitindo a navegação entre as diferentes "telas" do jogo.
    - `app.use(createPinia())`: O Pinia é instalado para gerenciamento de estado global.
    - `app.mount('#app')`: A aplicação Vue é montada no elemento `<div id="app"></div>` no `index.html`, e o controle da página é passado para o Vue.

3.  **Componente Raiz (`App.vue`):**
    - `App.vue` é o componente de nível superior que contém o `<router-view>`. Este é o slot onde os componentes das rotas (telas do jogo) serão renderizados.
    - Ele também gerencia a música de fundo global do jogo, iniciando-a com base na interação do usuário e garantindo que ela seja reproduzida em loop.

4.  **Gerenciamento de Rotas (`router/index.js`):**
    - O `router/index.js` define as diferentes rotas do jogo (menu, mapa, batalha, etc.).
    - O `router.beforeEach` é um *navigation guard* que é executado antes de cada mudança de rota. Ele é responsável por chamar o `audioManager` para tocar a trilha sonora apropriada para a nova rota ou parar a música se a rota não tiver uma trilha sonora definida.

5.  **Telas do Jogo (`views/`):**
    - Dependendo da rota ativa, um componente da pasta `views/` é carregado e renderizado dentro do `<router-view>` em `App.vue`.
    - Por exemplo, ao navegar para `/map`, `GameMapWithZoom.vue` é carregado.

6.  **Interação e Lógica do Jogo (Componentes e Utils):**
    - **`GameMapWithZoom.vue`:** Ao carregar, ele inicializa o mapa, posiciona o jogador e os chefes. Ele escuta o evento `playerMoved` (disparado por `PlayerSprite.vue`) para atualizar a câmera e verificar a proximidade com os chefes.
    - **`PlayerSprite.vue`:** Escuta eventos de teclado para movimentação do jogador. No seu `gameLoop`, ele atualiza a posição do jogador e dispara o evento `playerMoved` para que `GameMapWithZoom.vue` possa reagir.
    - **`ProfessorBoss.vue`:** Reage ao evento `professorProximity` (disparado por `GameMapWithZoom.vue`) para animar o chefe quando o jogador está próximo.
    - **`BattleScreen.vue`:** Quando uma batalha é iniciada, este componente é carregado. Ele gerencia a lógica de turnos, ataques, vida dos personagens e as animações de ataque.
    - **`utils/dadosBatalha.js`:** Fornece os dados dos chefes e gerencia o estado global do jogador (vida, chefes derrotados) que é compartilhado entre as telas.
    - **`utils/audioManager.js` e `utils/audioUtils.js`:** Gerenciam a reprodução de música de fundo e efeitos sonoros em todo o jogo.

Em resumo, o fluxo começa com o `index.html`, passa pelo `main.js` para inicializar o Vue e o roteador, e então o `App.vue` atua como um contêiner para as diferentes telas (`views/`) que são carregadas dinamicamente. A interação entre os componentes e as funções utilitárias impulsiona a lógica do jogo.

## Animações ou Movimentações:

As animações e movimentações são controladas principalmente nos componentes `PlayerSprite.vue`, `ProfessorBoss.vue` e `BattleScreen.vue`.

- **`PlayerSprite.vue` (Movimentação e Animação do Jogador):**
  - **Controles de Animação:** A animação do jogador é baseada em spritesheets ou sequências de imagens individuais. O objeto `frames` no script define os caminhos para as imagens de animação para cada direção (`down`, `up`, `left`, `right`).
  - **Definição de Sprites/Quadros:** As imagens dos sprites são importadas dinamicamente usando `new URL('@/assets/images/...')` e armazenadas nos arrays dentro do objeto `frames`.
  - **Troca de Animação:**
    - A variável `direction` (ref) determina qual conjunto de sprites (para cima, baixo, esquerda, direita) deve ser usado.
    - A variável `frameIndex` (ref) é incrementada ciclicamente (`(frameIndex.value + 1) % frames[direction.value].length`) dentro do `gameLoop` para avançar para o próximo quadro da animação.
    - A velocidade da animação é controlada por `animationSpeed` e `lastFrameChange` no `gameLoop`, garantindo que os frames mudem em intervalos regulares.
    - A movimentação do jogador (`position.value.x`, `position.value.y`) é atualizada com base nas teclas pressionadas (`keysPressed`) e na constante `step`.

- **`ProfessorBoss.vue` (Animação dos Chefes no Mapa):**
  - **Animação Padrão:** Os sprites dos chefes possuem uma animação de "flutuação" (`float`) definida em CSS (`@keyframes float`).
  - **Animação Intensificada:** Quando o jogador está próximo (`isPlayerNearby` é `true`), uma animação mais "agitada" (`float-excited`) é aplicada, juntamente com um aumento de escala e um filtro de sombra para indicar interatividade.
  - **Sprites:** O sprite principal do chefe é definido na propriedade `boss.sprite` (vindo de `dadosBatalha.js`).

- **`BattleScreen.vue` (Animações de Ataque na Batalha):**
  - **Animação de Ataque do Jogador:**
    - Quando o jogador realiza um ataque, a função `animarAtaquePlayer(sprites)` é chamada. Ela recebe um array de sprites específicos para aquele ataque (`ataque.sprite` de `dadosBatalha.js`).
    - `currentPlayerAttackSprites` e `playerAttackFrame` controlam qual sprite de ataque do jogador está sendo exibido.
    - Um `setInterval` é usado para iterar sobre os frames do ataque, e `isPlayerAttacking` controla a visibilidade da animação.
  - **Animação de Ataque do Chefe:**
    - Similarmente, quando o chefe contra-ataca, `bossAttackSprites`, `bossAttackName` e `bossAttackFrame` são atualizados com os sprites do ataque do chefe.
    - Um `setInterval` gerencia a exibição dos frames de ataque do chefe.
  - **Sprites:** Os sprites de ataque para jogadores e chefes são definidos diretamente nos objetos de ataque dentro de `dadosBatalha.js`.

## Interações e Eventos:

As interações e eventos no jogo são gerenciados através de listeners de eventos do navegador e eventos personalizados do Vue/JavaScript.

- **Eventos de Teclado:**
  - **`PlayerSprite.vue`:**
    - `handleKeyDown(e)` e `handleKeyUp(e)`: Escutam eventos `keydown` e `keyup` no `window` para rastrear quais teclas de seta estão sendo pressionadas. Isso permite a movimentação contínua do jogador.
  - **`GameMapWithZoom.vue`:**
    - `handleKeyDown(e)`: Escuta eventos `keydown` no `window`.
      - Se a tecla 'E' for pressionada, chama `startBattle()` para tentar iniciar uma batalha com um chefe próximo.
      - Se a tecla 'M' for pressionada, chama `toggleMiniMap()` para alternar a visibilidade do mini-mapa.

- **Eventos de Clique (Mouse/Toque):**
  - **`App.vue`:**
    - Escuta eventos `click` no `window` para iniciar a reprodução da música de fundo. Isso é uma prática comum para contornar as políticas de autoplay de navegadores, que exigem uma interação do usuário antes de permitir a reprodução de áudio.
  - **`GameMapWithZoom.vue`:**
    - Botões de interface (ex: "Voltar ao Menu", botão "M" para mini-mapa) têm listeners `@click` que disparam funções Vue para navegação ou alternância de estado.
  - **`BattleScreen.vue`:**
    - Os botões de ataque do jogador possuem listeners `@click` que chamam a função `realizarAtaque(ataque)` quando clicados, iniciando a lógica de batalha.

- **Eventos Personalizados (Custom Events):**
  - **`playerMoved`:**
    - **Disparado por:** `PlayerSprite.vue` (dentro de `gameLoop` e `handleKeyPress`).
    - **Detalhes:** Contém as coordenadas `x` e `y` atualizadas do jogador (`e.detail.x`, `e.detail.y`).
    - **Escutado por:** `GameMapWithZoom.vue` (na função `updatePlayerPosition`). Usado para:
      - Atualizar a posição da câmera para seguir o jogador.
      - Verificar a proximidade do jogador com os chefes no mapa.
  - **`professorProximity`:**
    - **Disparado por:** `GameMapWithZoom.vue` (dentro de `updatePlayerPosition`).
    - **Detalhes:** Contém o `bossId` do chefe e um booleano `isNear` (`e.detail.bossId`, `e.detail.isNear`).
    - **Escutado por:** `ProfessorBoss.vue` (na função `handlePlayerProximity`). Usado para:
      - Ativar/desativar a animação intensificada e o destaque do rótulo do chefe quando o jogador está próximo.

## Outros pontos relevantes:

- **Lógica de Colisão:**
  - Implementada na função `isColliding(newX, newY)` dentro de `PlayerSprite.vue`.
  - Verifica se a próxima posição do jogador se sobrepõe a um tile de colisão (representado por `1` no `gameMap`).
  - Considera uma `collisionTolerance` para permitir uma pequena sobreposição antes de bloquear o movimento, o que pode suavizar a experiência de colisão.
  - A colisão é baseada em tiles, verificando os tiles que o sprite do jogador ocupa.

- **Armazenamento de Dados (Estado do Jogador):**
  - O estado do jogador (vida, ataques, vitórias, derrotas, chefes derrotados, vida máxima) é gerenciado de forma reativa e persistente usando o composable `useDadosJogador()` de `utils/dadosBatalha.js`.
  - Este composable utiliza `useStorage` da biblioteca `@vueuse/core`, o que significa que os dados do jogador são automaticamente salvos no `localStorage` do navegador. Isso permite que o progresso do jogador seja mantido entre as sessões do navegador.

- **Configuração do Projeto (Vite):**
  - O projeto Vue.js é configurado com Vite (`vite.config.js`). Vite é uma ferramenta de build de frontend que oferece uma experiência de desenvolvimento muito rápida.
  - Ele lida com a compilação de componentes Vue, JavaScript, CSS e o empacotamento para produção.

- **Gerenciamento de Estado (Pinia):**
  - O Pinia é utilizado como o gerenciador de estado oficial do Vue.js 3. Embora o exemplo fornecido não mostre um *store* Pinia explícito, a importação `createPinia()` em `main.js` indica que ele está configurado para uso. O `useDadosJogador` utiliza `useStorage` que é uma alternativa para estados simples e persistentes.

- **Música e Efeitos Sonoros:**
  - O jogo utiliza a biblioteca Howler.js para gerenciamento de áudio (`audioManager.js`).
  - `audioManager` permite transições suaves entre as músicas de fundo (menu, mapa, batalha) e `audioUtils` fornece funções para tocar efeitos sonoros pontuais com debounce.

- **Estrutura de Componentes:**
  - O projeto segue uma estrutura de componentes bem definida, separando a lógica em `views` (telas), `components` (elementos reutilizáveis) e `utils` (funções auxiliares), o que facilita a manutenção e escalabilidade.

